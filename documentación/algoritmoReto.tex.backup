\documentclass[a4paper,10pt]{scrartcl}
\usepackage[utf8]{inputenc}
\usepackage{verbatim}
\usepackage{algorithm}
\usepackage{algorithmic}
\input{spanishAlgorithmic.tex}  % Variables de entorno en español

\newcommand{\objeto}[4]{\underline{\textbf{TDA #1}}
            \begin{center}\begin{tabular}{|p{7cm}|}
                 \hline
                 \multicolumn{1}{|c|}{\texttt{#1}}\\
                 \hline
                  \\#2\\\\
                 \hline
                 \\#3\\\\
                 \hline
            \end{tabular}\end{center}
            \begin{itemize}
            #4
            \end{itemize}
               }
\def\C++#1{\texttt{#1}}
\def\T_{\texttt{T}}
%opening
\title{Reto II: Problema de las cifras}
\author{Francisco David Charte Luque \and 
        Ignacio Cordón Castillo \and
        Mario Román García}
\date{}
\begin{document}
\maketitle

    \objeto{DobleCola}{\C++{-- double\_queue}}
                {\C++{+ push\_back()}\\
                 \C++{+ pop\_back()}\\
                 \C++{+ push\_front()}\\
                 \C++{+ pop\_front()}\\
                 \C++{+ front()}\\
                 \C++{+ back()}}{
 \item \C++{double\_queue} Vector de objetos \T_ que es usado por
  el TDA \C++{DobleCola} como una doble cola enlazada (en la que
  se puede suprimir e introducir elementos por ambos lados)
 \item \C++{push\_back()} Introduce un elemento \T_ en la cola de
  \C++{double\_queue}
 \item \C++{pop\_back()} Saca un elemento \T_ de la cola de 
  \C++{double\_queue}
 \item \C++{push\_back()} Introduce un elemento \T_ en el frente
  de \C++{push\_back()}
 \item \C++{pop\_back()} Saca un elemento \T_ del frente de 
  \C++{push\_back()}}  
  
 \objeto{ProblemaCifras}{\C++{-- numerosIniciales}\\
                        \C++{-- DobleCola numeros}\\
                        \C++{-- DobleCola operaciones}\\
                        \C++{-- meta}\\
                        \C++{-- operacionesPosibles}\\
                        }
                        {\C++{+ opera()}\\
                        \C++{+ resuelve()}}{
  \item \C++{numerosIniciales} Conjunto que almacena los enteros
   a partir de los que se pretende obtener meta
  \item \C++{numeros} Instancia de \C++{DobleCola} en la que se
   almacenan los números con los que se opera en cada llamada
   a \C++{resuelve()}
  \item \C++{operaciones} Instancia de \C++{DobleCola} en la que
   se almacenarán las operaciones realizadas hasta llegar a meta,
   o a una aproximación a meta
  \item \C++{meta} Entero positivo de 3 cifras a aproximar, y en
   caso de ser posible, hallar de forma exacta mediante operaciones sobre
  \item \C++{operacionesPosibles} Conjunto que contiene todas las
   operaciones posibles aplicables}       
   
   
   \begin{algorithm}
   \begin{algorithmic}[1]
   \REQUIRE \C++{meta} número a aproximar\\
            \C++{size}, número de posiciones de la lista \C++{numeros}
            
            
   \ENSURE \TRUE si logramos alcanzar exactamente \C++{meta}
   
   \IF{\C++{size} es menor a 2} 
   \STATE{Devolvemos \FALSE}
   \ENDIF
   
   \FOR{la primera posición de la lista, hasta la anterior a la 
        última (\C++{size})}
   \STATE {Tomamos \C++{a} como el primer número de la lista}
   \IF{$a\neq 0$}
   \STATE{sobreescribimos la posición que ocupaba \C++{a}
   con lo que haya en la última posición de la lista}
   \ELSE
   \STATE{Avanzamos a la iteración siguiente}
  
   \ENDIF
   \ENDFOR
   \end{algorithmic}

   \end{algorithm}
\end{document}